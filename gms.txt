create table if not exists rights(
id integer primary key auto_increment,
description varchar(100) not null unique,
notes varchar(100) not null
);


create table if not exists company_name(
id integer not null,
active integer not null,
company_name varchar(100) not null
);



create table if not exists regulator_ip(
id integer primary key auto_increment,
url varchar(100) not null,
created_at varchar(100) not null
);





create table if not exists province(
id integer primary key auto_increment,
names varchar(100) not null
);



create table if not exists seasons(
id integer primary key auto_increment,
name varchar(100) not null unique,
active integer not null default 1,
created_at varchar(100) not null,
datetime TIMESTAMP not null
);



create table if not exists users(

id integer primary key auto_increment,
name varchar(100) not null,
surname varchar(100) not null,
username varchar(100) not null,
hash varchar(100) not null,
rightsid integer not null,
active integer not null default 1,
access_code integer not null,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(rightsid) references rights(id)

);







create table if not exists bale_tracking_rights(
id integer primary key auto_increment,
userid integer not null,
receiving_userid integer not null,
delivering_userid integer not null,
seasonid integer not null,
active integer not null default 1,
created_at integer not null,
datetime TIMESTAMP not null,
foreign key(receiving_userid) references users(id),
foreign key(delivering_userid) references users(id),
foreign key(userid) references users(id)
);




create table if not exists rejected_bales_rights(
id integer primary key auto_increment,
userid integer not null,
companyid integer not null,
useridrights integer not null,
seasonid integer not null,
active integer not null default 1,
created_at integer not null,
datetime TIMESTAMP not null,
foreign key(companyid) references users(id),
foreign key(useridrights) references users(id),
foreign key(userid) references users(id)
);






create table if not exists auction_rights(
id integer primary key auto_increment,
userid integer not null,
companyid integer not null,
seasonid integer not null,
active integer not null default 1,
created_at integer not null,
datetime TIMESTAMP not null,
foreign key(companyid) references users(id),
foreign key(userid) references users(id)
);





create table if not exists regulator_sync_status(
id integer primary key auto_increment,
userid integer not null,
status integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id)
);



create table if not exists supervisors(
id integer primary key auto_increment,
supervisorid integer not null,
leaf_techid integer not null,
seasonid integer not null,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(supervisorid) references users(id),
foreign key(leaf_techid) references users(id),
foreign key(seasonid) references seasons(id)

);





create table if not exists user_home(
id integer primary key auto_increment,
userid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
sync integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id)
);




create table if not exists products(
id integer primary key auto_increment,
name varchar(100) not null,
units varchar(100) not null,
datetime TIMESTAMP not null
);


create table if not exists store(
id integer primary key auto_increment,
userid integer not null,
name varchar(100) not null,
location varchar(100) not null,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id)
);




create table if not exists store_items(
id integer primary key auto_increment,
userid integer not null,
storeid integer not null,
productid integer not null,
quantity integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(storeid) references store(id),
foreign key(productid) references products(id)
);






create table if not exists arc_products(
id integer primary key auto_increment,
userid integer not null,
storeitemid integer not null ,
old_quantity integer not null,
new_quantity integer not null,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(storeitemid) references store_items(id)
);





create table if not exists truck_destination(
id integer primary key auto_increment,
userid integer not null,
trucknumber varchar(100) not null,
driver_name varchar(100) not null,
driver_surname varchar(100) not null,
destination varchar(100) not null,
close_open integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id)
);





create table if not exists disbursement(
id integer primary key auto_increment,
disbursement_trucksid integer not null,
userid integer not null,
productid integer not null,
storeid integer not null,
quantity integer not null,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(productid) references products(id),
foreign key(storeid) references store(id),
foreign key(disbursement_trucksid) references truck_destination(id)
);



create table if not exists total_disbursement(
id integer primary key auto_increment,
disbursement_trucksid integer not null,
disbursementid integer not null,
userid integer not null,
productid integer not null,
storeid integer not null,
quantity integer not null,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(productid) references products(id),
foreign key(storeid) references store(id),
foreign key(disbursement_trucksid) references truck_destination(id),
foreign key(disbursementid) references disbursement(id)
);





create table if not exists returned_stock(
id integer primary key auto_increment,
disbursement_trucksid integer not null,
userid integer not null,
productid integer not null,
storeid integer not null,
quantity integer not null,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(productid) references products(id),
foreign key(storeid) references store(id),
foreign key(disbursement_trucksid) references truck_destination(id)
);





create table  if not exists truck_to_grower(
id integer primary key auto_increment,
userid integer not null,
growerid integer not null,
disbursement_trucksid integer not null,
productid integer not null,
quantity integer not null,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(productid) references products(id),
foreign key(disbursement_trucksid) references truck_destination(id),
foreign key(growerid) references growers(id)
);








create table if not exists prices(
id integer primary key auto_increment,
userid integer not null,
productid integer not null,
amount double(100,2) not null default 0,
seasonid integer not null,
sync integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(productid) references products(id)
);


create table if not exists growers(
id integer primary key auto_increment,
userid integer not null,
name varchar(100) not null,
surname varchar(100) not null,
grower_num varchar(100) unique,
area varchar(100) not null,
province varchar(100),
phone varchar(100),
id_num varchar(100) not null,
seasonid integer not null,
sync integer not null default 1,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id)
);




create table if not exists grower_profile(
id integer primary key auto_increment,
growerid integer not null,
image blob not null,
sync integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null
);





create table if not exists grower_field_officer(
id integer primary key auto_increment,
userid integer not null,
growerid integer not null,
field_officerid integer not null,
seasonid integer not null,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(field_officerid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);




create table if not exists assessment_type(
id integer primary key auto_increment,
name varchar(100) not null
);


create table if not exists assessments(
id integer primary key auto_increment,
userid integer not null,
name varchar(100) not null,
assessment_typeid integer not null default 1,
number integer not null default 1,
foreign key(userid) references users(id),
foreign key(assessment_typeid) references assessment_type(id)
);





create table if not exists lat_long(
id integer primary key auto_increment,
userid integer not null ,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
seasonid integer not null,
hectares varchar(100),
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(growerid) references growers(id),
foreign key(seasonid) references seasons(id)
);







create table if not exists barn_location(
id integer primary key auto_increment,
userid integer not null ,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
seasonid integer not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(growerid) references growers(id),
foreign key(seasonid) references seasons(id)
);







create table if not exists no_grower_location(
id integer primary key auto_increment,
userid integer not null ,
growerid integer not null,
description varchar(100) not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
seasonid integer not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(growerid) references growers(id),
foreign key(seasonid) references seasons(id)
);




create table if not exists grower_farm(
id integer primary key auto_increment,
userid integer not null ,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
seasonid integer not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(growerid) references growers(id),
foreign key(seasonid) references seasons(id)
);







create table if not exists assessment_images(
id integer primary key auto_increment,
userid integer not null,
growerid integer not null,
seasonid integer not null,
image TEXT not null,
description varchar(100) not null,
conditions varchar(100) not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(growerid) references growers(id),
foreign key(seasonid) references seasons(id)
);



create table if not exists grower_image(
id integer primary key auto_increment,
userid integer not null,
growerid integer not null,
seasonid integer not null,
image TEXT not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(growerid) references growers(id),
foreign key(seasonid) references seasons(id)
);





create table if not exists grower_visits(
id integer primary key auto_increment,
userid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
description varchar(100) not null,
conditions varchar(100) not null,
other varchar(100) not null,
seasonid integer not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(growerid) references growers(id),
foreign key(seasonid) references seasons(id)
);


create table if not exists quantitative_assessments(
id integer primary key auto_increment,
userid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
description varchar(100) not null,
number varchar(100) not null,
seasonid integer not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(growerid) references growers(id),
foreign key(seasonid) references seasons(id)
);








create table if not exists loans(
id integer primary key auto_increment,
userid integer not null,
growerid integer not null,
productid integer not null,
quantity integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
seasonid integer not null,
verified integer default 0,
processed integer default 0,
processed_by integer default 0,
processed_at varchar(100),
verified_by integer default 0,
hectares varchar(100) default 0,
verified_at varchar(100),
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(growerid) references growers(id),
foreign key(seasonid) references seasons(id),
foreign key(productid) references products(id)
);





create table if not exists contracted_hectares(
id integer primary key auto_increment,
userid integer not null,
growerid integer not null,
seasonid integer not null,
hectares varchar(100) not null,
sync integer not null default 0,
surrogate integer not null default 0,
created varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(growerid) references growers(id),
foreign key(seasonid) references seasons(id)
);



create table if not exists con_loan(
id integer primary key auto_increment,
loanid integer not null,
sync integer not null default 0,
surrogate integer not null default 0,
foreign key(loanid) references loans(id)
);




create table if not exists confirm_user(
id integer primary key auto_increment,
userid integer not null,
confirmid integer not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(confirmid) references con_loan(id)
);







create table if not exists sod(
id integer primary key auto_increment,
userid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
seasonid integer not null,
time varchar(100) not null,
eod integer not null default 0,
created_at varchar(100) not null,
sync integer not null default 0,
surrogate integer not null default 0,
eod_created_at TEXT not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id)
);





create table if not exists exemptions(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
exemption_date varchar(100) not null,
description varchar(100) not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id)
);



create table if not exists recovery(
id integer primary key auto_increment,
grower_num varchar(100) not null,
seasonid integer not null,
userid integer not null,
bales integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id)
);




create table if not exists road_blocks(
id integer primary key auto_increment,
userid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
seasonid integer not null,
time varchar(100) not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id)
);


create table if not exists eod(
id integer primary key auto_increment,
userid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
seasonid integer not null,
time varchar(100) not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id)
);



create table if not exists off_route(

id integer primary key auto_increment,
userid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
seasonid integer not null,
time varchar(100) not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id)
);






create table if not exists parameters(
id integer primary key auto_increment,
name varchar(100) not null unique
);



create table if not exists charges(
id integer primary key auto_increment,
name varchar(100) not null unique
);



create table if not exists charges_amount(
id integer primary key auto_increment,
chargeid integer not null,
seasonid integer not null,
parameterid integer not null,
userid integer not null,
sync integer not null default 0,
surrogate integer not null default 0,
value double(100,2) not null,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(chargeid) references charges(id),
foreign key(parameterid) references parameters(id)
);







create table if not exists loan_payments(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
amount double(100,2) not null,
mass double(100,2) not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);




create table if not exists loan_payment_total(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
amount double(100,2) not null,
mass double(100,2) not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);









create table if not exists loan_balances(
id integer primary key auto_increment,
loanid integer not null,
amount double(100,2) default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null
);






create table if not exists seed_beds(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
no_of_irr_beds integer not null default 0,
no_of_dry_beds integer not null default 0,
buying_seedlings_for varchar(100),
varieties_irr varchar(100),
varieties_dry varchar(100),
latitude varchar(100) not null,
longitude varchar(100) not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)

);







create table if not exists ploughing(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
no_of_plants integer not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);






create table if not exists fertilization_ammonium(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
kg_per_ha varchar(100) not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);








create table if not exists reaping(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
top_leaf integer not null default 0,
lugs integer not null default 0,
cutters integer not null default 0,
prime integer not null default 0,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);










create table if not exists curing(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
yellowing integer not null default 0,
leaf_drying integer not null default 0,
stem_drying integer not null default 0,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);









create table if not exists fertilization_potassium(

id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
kg_per_ha varchar(100) not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);









create table if not exists farm_mapping(

id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
first_lat varchar(100) not null,
first_long varchar(100) not null,
second_lat varchar(100) not null,
second_long varchar(100) not null,
third_lat varchar(100) not null,
third_long varchar(100) not null,
forth_lat varchar(100) not null,
forth_long varchar(100) not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)

);






create table if not exists  mapped_hectares(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
ha varchar(100) not null,
sync integer not null default 0,
surrogate integer not null default 0,
datetime TIMESTAMP not null,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);




create table if not exists  mapped_hail_hectares(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
ha varchar(100) not null,
sync integer not null default 0,
surrogate integer not null default 0,
datetime TIMESTAMP not null,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);




create table if not exists estimates(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
varieties varchar(100) not null,
estimate varchar(100) not null,
sync integer not null default 0,
surrogate integer not null default 0,
datetime TIMESTAMP not null,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);







create table if not exists data_collection(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
grower_age integer not null,
grower_sex integer not null ,
number_of_works integer not null,
income_per_month double(100,2) not null,
number_of_kids integer not null,
sync integer not null default 0,
surrogate integer not null default 0,
datetime TIMESTAMP not null,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);


create table if not exists kids_age(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
kid_age integer not null,
sync integer not null default 0,
surrogate integer not null default 0,
datetime TIMESTAMP not null,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);


create table if not exists education_level(
id integer primary key auto_increment,
description varchar(100) not null
);


create table if not exists grower_level_of_education(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
education_level_id integer not null,
sync integer not null default 0,
surrogate integer not null default 0,
datetime TIMESTAMP not null,
created_at varchar(100) not null,
foreign key(education_level_id) references education_level(id),
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)

);



create table if not exists health_conditions(
id integer primary key auto_increment,
description varchar(100) not null
);



create table if not exists grower_health(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
health_conditionid integer not null,
sync integer not null default 0,
surrogate integer not null default 0,
datetime TIMESTAMP not null,
created_at varchar(100) not null,
foreign key(health_conditionid) references health_conditions(id),
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);






create table if not exists hail_strike_mapping(

id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
first_lat varchar(100) not null,
first_long varchar(100) not null,
second_lat varchar(100) not null,
second_long varchar(100) not null,
third_lat varchar(100) not null,
third_long varchar(100) not null,
forth_lat varchar(100) not null,
forth_long varchar(100) not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)

);













create table if not exists seedling_quality(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
excellent integer not null default 0,
standard integer not null default 0,
average integer not null default 0,
poor integer not null default 0,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);










create table if not exists plant_irrigated(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
ha_planted_to_date varchar(100),
ha varchar(100),
date_of_plant varchar(100),
crop_stand_perc varchar(100),
crop_unifomity_perc varchar(100),
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)

);







create table if not exists planting_dryLand(

id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
ha_planted_to_date varchar(100),
ha varchar(100),
date_of_plant varchar(100),
crop_stand_perc varchar(100),
crop_unifomity_perc varchar(100),
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)

);







create table if not exists crop_growth(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
quarter_grown_5_7 integer not null default 0,
half_grown_8_12 integer not null default 0,
three_quarters_13_17 integer not null default 0,
full_grown_18_22 integer not null default 0,
fully_developed integer not null default 0,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);








create table if not exists crop_development(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
light_yellow integer default 0,
light_green integer default 0,
medium integer default 0,
heavy integer default 0,
heavy_and_dark integer default 0,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);










create table if not exists cultural_practices(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
weed_infestation_level_perc varchar(100),
weed_control_method varchar(100),
topping_level varchar(100),
basal_plant_fertilisation_kg_ha varchar(100),
suckering integer not null default 0,
post_topping_unifomity_perc varchar(100),
pets_and_disease_management varchar(100),
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)

);







create table if not exists barn_repair_and_maintenance(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
barn_not_repaired integer not null default 0,
barn_under_repair integer not null default 0,
finished_repaired integer not null default 0,
barn_working_well integer not null default 0,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)

);





create table if not exists hail_strike(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
percentage_strike varchar(100) not null,
strike_date varchar(100) not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);



create table if not exists system_estimate_prediction(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
estimate varchar(100) not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);





create table if not exists grower_number_of_bales(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
bales integer not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);






create table if not exists ready_for_booking(
id integer primary key auto_increment,
userid integer not null,
grower_number_of_balesid integer not null,
bales integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
sync integer not null default 0,
created_at varchar(100) not null,
sell_date varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(grower_number_of_balesid) references grower_number_of_bales(id)
);



create table if not exists rejected_bales(
id integer primary key auto_increment,
userid integer not null,
ready_for_bookingid integer not null,
bales integer not null default 0,
latitude varchar(100) not null,
longitude varchar(100) not null,
sync integer not null default 0,
created_at varchar(100) not null,
sell_date varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(ready_for_bookingid) references ready_for_booking(id)
); 




create table if not exists grower_number_of_bales_total(
id integer primary key auto_increment,
grower_number_of_balesid integer not null,
bales integer not null,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(grower_number_of_balesid) references grower_number_of_bales(id)
);


create table if not exists contracted_to(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
sync integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);



create table if not exists grower_number_sale_point(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
floor_code varchar(100) not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);




create table if not exists insurance(
id integer primary key auto_increment,
userid integer not null,
name varchar(100) not null,
created_at varchar(100) not null,
foreign key(userid) references users(id)
); 





create table if not exists insurance_users(
id integer primary key auto_increment,
userid integer not null,
insuranceid integer not null,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(insuranceid) references insurance(id)
);






create table if not exists insurance_growers(
id integer primary key auto_increment,
userid integer not null,
insuranceid integer not null,
growerid integer not null,
seasonid integer not null,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(insuranceid) references insurance(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);



create table if not exists insurance_grower_visits(
id integer primary key auto_increment,
userid integer not null,
insuranceid integer not null,
growerid integer not null,
seasonid integer not null


);



create table if not exists visits(
id integer primary key auto_increment,
userid integer not null,
growerid integer not null,
seasonid integer not null,
description varchar(100) not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);


    


create table if not exists grower_payment_import_dates(
id integer primary key auto_increment,
userid integer not null,
growerid integer not null,
seasonid integer not null,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);





create table if not exists system_estimate_prediction(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
estimate varchar(100) not null,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);





create table if not exists grower_number_of_bales(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
bales integer not null default 0,
sync integer not null default 0,
surrogate integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);






create table if not exists ready_for_booking(
id integer primary key auto_increment,
userid integer not null,
grower_number_of_balesid integer not null,
bales integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
sync integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(grower_number_of_balesid) references grower_number_of_bales(id)
);




create table if not exists grower_number_of_bales_total(
id integer primary key auto_increment,
grower_number_of_balesid integer not null,
bales integer not null,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(grower_number_of_balesid) references grower_number_of_bales(id)
);






create table if not exists sold_bales(

id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
barcode varchar(100) not null,
mass varchar(100) not null,
price varchar(100) not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
sync integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)

);







create table if not exists total_sold_bales(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
quantity integer not null,
mass integer not null default 0,
sync integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id)
);






create table if not exists dispatch_note(
id integer primary key auto_increment,
userid integer not null,
receiverid integer not null,
seasonid integer not null,
note varchar(100) not null,
driver_name varchar(100) not null,
driver_surname varchar(100) not null,
horse_num varchar(100) not null,
trailer_num varchar(100) not null,
sync integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
open_close integer not null default 0,
receiver_close integer not null default 0,
foreign key(userid) references users(id),
foreign key(receiverid) references users(id),
foreign key(seasonid) references seasons(id)
);





create table if not exists dispatch_note_total_dispatched(
id integer primary key auto_increment,
dispatch_noteid integer not null,
quantity integer not null default 0,
mass integer not null default 0,
sync integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(dispatch_noteid) references dispatch_note(id)
);





create table if not exists dispatch_note_total_received(
id integer primary key auto_increment,
dispatch_noteid integer not null,
quantity integer not null,
mass integer not null default 0,
sync integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(dispatch_noteid) references dispatch_note(id)
);




create table if not exists dispatch_note_check_point(
id integer primary key auto_increment,
userid integer not null,
dispatch_noteid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(dispatch_noteid) references dispatch_note(id)
);




create table if not exists dispatch(
id integer primary key auto_increment,
userid integer not null,
dispatch_noteid integer not null,
sold_balesid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
sync integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(sold_balesid) references sold_bales(id),
foreign key(dispatch_noteid) references dispatch_note(id)
);


create table if not exists total_dispatch(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
quantity integer not null,
sync integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id)
);




create table if not exists received_bales_principal(
id integer primary key auto_increment,
dispatchid integer not null,
userid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
sync integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(dispatchid) references dispatch(id)
);







create table if not exists total_received_bales_principal(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
quantity integer not null,
sync integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id)
);





create table if not exists bale_tags(
id integer primary key auto_increment,
userid integer not null,
grower_number_of_balesid integer not null,
code varchar(100) not null,
sync integer not null default 0,
used integer not null default 0,
booked integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(userid) references users(id),
foreign key(grower_number_of_balesid) references grower_number_of_bales(id)
);





create table if not exists bale_booked(
id integer primary key auto_increment,
bale_tagid integer not null,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(bale_tagid) references bale_tags(id),
);




create table if not exists bale_tag_to_sold_bale(
id integer primary key auto_increment,
userid integer not null,
bale_tagid integer not null,
sold_balesid integer not null,
sync integer not null default 0,
created_at varchar(100) not null,
datetime TIMESTAMP not null,
foreign key(bale_tagid) references bale_tags(id),
foreign key(sold_balesid) references sold_bales(id),
foreign key(userid) references users(id)
);




create table if not exists tags_total(
id integer primary key auto_increment,
userid integer not null,
grower_number_of_balesid integer not null,
tags_total integer not null default 0,
tags_generated integer not null default 0,
sync integer not null default 0,
datetime TIMESTAMP not null,
foreign key(grower_number_of_balesid) references grower_number_of_bales(id),
foreign key(userid) references users(id)
);







create table if not exists auction_growers(
id integer primary key auto_increment,
userid integer not null,
growerid integer not null,
seasonid integer not null,
created_at integer not null,
sync integer not null default 0,
datetime TIMESTAMP not null,
foreign key(growerid) references growers(id),
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id)
);






DELIMITER $$
create trigger on_grower_lat_long
after insert on lat_long
for each row
BEGIN
 insert into visits(userid,growerid,seasonid,latitude,longitude,created_at,description) value(NEW.userid,NEW.growerid,NEW.seasonid,NEW.latitude,NEW.longitude,NEW.created_at,"Home Location");
END;
$$
DELIMITER ;






DELIMITER $$
create trigger on_grower_visit_barn_repair_and_maintenance
after insert on barn_repair_and_maintenance
for each row
BEGIN
 insert into visits(userid,growerid,seasonid,latitude,longitude,created_at,description) value(NEW.userid,NEW.growerid,NEW.seasonid,NEW.latitude,NEW.longitude,NEW.created_at,"barn repair and maintenance");
END;
$$
DELIMITER ;





DELIMITER $$
create trigger on_grower_barn_location
after insert on barn_location
for each row
BEGIN
 insert into visits(userid,growerid,seasonid,latitude,longitude,created_at,description) value(NEW.userid,NEW.growerid,NEW.seasonid,NEW.latitude,NEW.longitude,NEW.created_at,"barn location");
END;
$$
DELIMITER ;



DELIMITER $$
create trigger on_grower_grower_farm
after insert on grower_farm
for each row
BEGIN
 insert into visits(userid,growerid,seasonid,latitude,longitude,created_at,description) value(NEW.userid,NEW.growerid,NEW.seasonid,NEW.latitude,NEW.longitude,NEW.created_at,"grower farm");
END;
$$
DELIMITER ;


DELIMITER $$
create trigger on_grower_seed_beds
after insert on seed_beds
for each row
BEGIN
 insert into visits(userid,growerid,seasonid,latitude,longitude,created_at,description) value(NEW.userid,NEW.growerid,NEW.seasonid,NEW.latitude,NEW.longitude,NEW.created_at,"seed beds");
END;
$$
DELIMITER ;



DELIMITER $$
create trigger on_grower_ploughing
after insert on ploughing
for each row
BEGIN
 insert into visits(userid,growerid,seasonid,latitude,longitude,created_at,description) value(NEW.userid,NEW.growerid,NEW.seasonid,NEW.latitude,NEW.longitude,NEW.created_at,"ploughing");
END;
$$
DELIMITER ;



DELIMITER $$
create trigger on_grower_fertilization_ammonium
after insert on fertilization_ammonium
for each row
BEGIN
 insert into visits(userid,growerid,seasonid,latitude,longitude,created_at,description) value(NEW.userid,NEW.growerid,NEW.seasonid,NEW.latitude,NEW.longitude,NEW.created_at,"fertilization ammonium");
END;
$$
DELIMITER ;




DELIMITER $$
create trigger on_grower_visit_reaping
after insert on reaping
for each row
BEGIN
 insert into visits(userid,growerid,seasonid,latitude,longitude,created_at,description) value(NEW.userid,NEW.growerid,NEW.seasonid,NEW.latitude,NEW.longitude,NEW.created_at,"reaping");
END;
$$
DELIMITER ;




DELIMITER $$
create trigger on_grower_visit_curing
after insert on curing
for each row
BEGIN
 insert into visits(userid,growerid,seasonid,latitude,longitude,created_at,description) value(NEW.userid,NEW.growerid,NEW.seasonid,NEW.latitude,NEW.longitude,NEW.created_at,"curing");
END;
$$
DELIMITER ;



DELIMITER $$
create trigger on_grower_visit_fertilization_potassium
after insert on fertilization_potassium
for each row
BEGIN
 insert into visits(userid,growerid,seasonid,latitude,longitude,created_at,description) value(NEW.userid,NEW.growerid,NEW.seasonid,NEW.latitude,NEW.longitude,NEW.created_at,"fertilization potassium");
END;
$$
DELIMITER ;




DELIMITER $$
create trigger on_grower_visit_farm_mapping
after insert on farm_mapping
for each row
BEGIN
 insert into visits(userid,growerid,seasonid,latitude,longitude,created_at,description) value(NEW.userid,NEW.growerid,NEW.seasonid,NEW.first_lat,NEW.first_long,NEW.created_at,"farm mapping");
END;
$$
DELIMITER ;




DELIMITER $$
create trigger on_grower_visit_hail_strike_mapping
after insert on hail_strike_mapping
for each row
BEGIN
 insert into visits(userid,growerid,seasonid,latitude,longitude,created_at,description) value(NEW.userid,NEW.growerid,NEW.seasonid,NEW.first_lat,NEW.first_long,NEW.created_at,"hail strike mapping");
END;
$$
DELIMITER ;




DELIMITER $$
create trigger on_grower_visit_seedling_quality
after insert on seedling_quality
for each row
BEGIN
 insert into visits(userid,growerid,seasonid,latitude,longitude,created_at,description) value(NEW.userid,NEW.growerid,NEW.seasonid,NEW.latitude,NEW.longitude,NEW.created_at,"seedling quality");
END;
$$
DELIMITER ;



DELIMITER $$
create trigger on_grower_visit_plant_irrigated
after insert on plant_irrigated
for each row
BEGIN
 insert into visits(userid,growerid,seasonid,latitude,longitude,created_at,description) value(NEW.userid,NEW.growerid,NEW.seasonid,NEW.latitude,NEW.longitude,NEW.created_at,"plant irrigated");
END;
$$
DELIMITER ;




DELIMITER $$
create trigger on_grower_visit_planting_dryLand
after insert on planting_dryLand
for each row
BEGIN
 insert into visits(userid,growerid,seasonid,latitude,longitude,created_at,description) value(NEW.userid,NEW.growerid,NEW.seasonid,NEW.latitude,NEW.longitude,NEW.created_at,"planting dryLand");
END;
$$
DELIMITER ;




DELIMITER $$
create trigger on_grower_visit_crop_growth
after insert on crop_growth
for each row
BEGIN
 insert into visits(userid,growerid,seasonid,latitude,longitude,created_at,description) value(NEW.userid,NEW.growerid,NEW.seasonid,NEW.latitude,NEW.longitude,NEW.created_at,"crop growth");
END;
$$
DELIMITER ;





DELIMITER $$
create trigger on_grower_visit_crop_development
after insert on crop_development
for each row
BEGIN
 insert into visits(userid,growerid,seasonid,latitude,longitude,created_at,description) value(NEW.userid,NEW.growerid,NEW.seasonid,NEW.latitude,NEW.longitude,NEW.created_at,"crop development");
END;
$$
DELIMITER ;






DELIMITER $$
create trigger on_grower_visit_cultural_practices
after insert on cultural_practices
for each row
BEGIN
 insert into visits(userid,growerid,seasonid,latitude,longitude,created_at,description) value(NEW.userid,NEW.growerid,NEW.seasonid,NEW.latitude,NEW.longitude,NEW.created_at,"cultural practices");
END;
$$
DELIMITER ;





DELIMITER $$
create trigger on_grower_visit_hail_strike
after insert on hail_strike
for each row
BEGIN
 insert into visits(userid,growerid,seasonid,latitude,longitude,created_at,description) value(NEW.userid,NEW.growerid,NEW.seasonid,NEW.latitude,NEW.longitude,NEW.created_at,"hail Strike");
END;
$$
DELIMITER ;





DELIMITER $$
create trigger on_loan_verification
after insert on con_loan
for each row
BEGIN
 UPDATE loans SET verified = 1  WHERE id = NEW.loanid;
END;
$$
DELIMITER ;



DELIMITER $$
create   trigger on_product_update
after update on store_items
for each row
BEGIN
insert into arc_products(storeitemid,userid,old_quantity,new_quantity,created_at) value(OLD.id,New.userid,OLD.quantity,NEW.quantity,NEW.created_at);
END;
$$
DELIMITER ;



DELIMITER $$
create trigger on_disbursement
after insert on disbursement
for each row
BEGIN
 insert into total_disbursement(disbursement_trucksid,disbursementid,userid,productid,storeid,quantity,created_at
) values(NEW.disbursement_trucksid,NEW.id,NEW.userid,NEW.productid,New.storeid,New.quantity,NEW.created_at);
END; 
$$
DELIMITER ;



insert into assessment_type(name) value("Qualitative");
insert into assessment_type(name) value("Quantitative");



insert into rights(description,notes) value("System administrator","System administrator1");
insert into rights(description,notes) value("I.T Assistant","I.T Assistant2");
insert into rights(description,notes) value("Accountant","Accountant3");
insert into rights(description,notes) value("Account Clerk","Account Clerk4");
insert into rights(description,notes) value("Hr Admin","Account Clerk5");
insert into rights(description,notes) value("Hr Assistant","Hr Assistant6");
insert into rights(description,notes) value("Area Manager","Area Manager7");
insert into rights(description,notes) value("Field Officer","Field Officer8");
insert into rights(description,notes) value("Field Officer(Loans Access)","Field Officer9");
insert into rights(description,notes) value("Management","Management10");
insert into rights(description,notes) value("Registration","Registration11");
insert into rights(description,notes) value("WareHouse Supervisor","WareHouse Supervisor12");
insert into rights(description,notes) value("Insurance","Insurance13");
insert into rights(description,notes) value("Company","Company14");
insert into rights(description,notes) value("Surrogate","Surrogate15");
insert into rights(description,notes) value("Check Point","Check Point16");


insert into users(name,surname,username,hash,rightsid,active,access_code,created_at) value("sysadmin","sysadmin","sysadmin","sysadmin",1,1,0000,"2022-09-12");


insert into province(names) value("Harare");
insert into province(names) value("Mashonaland East");
insert into province(names) value("Mashonaland West");
insert into province(names) value("Mashonaland Central");
insert into province(names) value("Manicaland");
insert into province(names) value("Matebeleland North");
insert into province(names) value("Matebeleland South");
insert into province(names) value("Masvingo");
insert into province(names) value("Midlands");
insert into province(names) value("Bulawayo");


insert into parameters(name) value("Amount");
insert into parameters(name) value("Percentage");

insert into charges(name) value("Interest");
insert into charges(name) value("Adminstration");
insert into charges(name) value("Transport");






