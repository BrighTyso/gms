create table if not exists rights(
id integer primary key auto_increment,
description varchar(100) not null,
notes varchar(100) not null
);


create table if not exists company_name(
id integer not null,
active integer not null,
company_name varchar(100) not null
);




create table if not exists province(
id integer primary key auto_increment,
names varchar(100) not null
);


create table if not exists seasons(
id integer primary key auto_increment,
name varchar(100) not null unique,
active integer not null default 1,
created_at varchar(100) not null
);



create table if not exists users(

id integer primary key auto_increment,
name varchar(100) not null,
surname varchar(100) not null,
username varchar(100) not null,
hash varchar(100) not null,
rightsid integer not null,
active integer not null default 1,
access_code integer not null,
created_at varchar(100) not null,
foreign key(rightsid) references rights(id)

);




create table if not exists supervisors(

id integer primary key auto_increment,
supervisorid integer not null,
leaf_techid integer not null,
seasonid integer not null,
created_at varchar(100) not null,
foreign key(supervisorid) references users(id),
foreign key(leaf_techid) references users(id),
foreign key(seasonid) references seasons(id)

);







create table if not exists user_home(
id integer primary key auto_increment,
userid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id)
);




create table if not exists products(
id integer primary key auto_increment,
name varchar(100) not null,
units varchar(100) not null
);


create table if not exists store(
id integer primary key auto_increment,
userid integer not null,
name varchar(100) not null,
location varchar(100) not null,
created_at varchar(100) not null,
foreign key(userid) references users(id)
);




create table if not exists store_items(
id integer primary key auto_increment,
userid integer not null,
storeid integer not null,
productid integer not null,
quantity integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(storeid) references store(id),
foreign key(productid) references products(id)
);



create table if not exists arc_products(
id integer primary key auto_increment,
userid integer not null,
storeitemid integer not null ,
old_quantity integer not null,
new_quantity integer not null,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(storeitemid) references store_items(id)
);










create table if not exists truck_destination(
id integer primary key auto_increment,
userid integer not null,
trucknumber varchar(100) not null,
driver_name varchar(100) not null,
driver_surname varchar(100) not null,
destination varchar(100) not null,
close_open integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id)
);





create table if not exists disbursement(
id integer primary key auto_increment,
disbursement_trucksid integer not null,
userid integer not null,
productid integer not null,
storeid integer not null,
quantity integer not null,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(productid) references products(id),
foreign key(storeid) references store(id),
foreign key(disbursement_trucksid) references truck_destination(id)
);



create table if not exists total_disbursement(
id integer primary key auto_increment,
disbursement_trucksid integer not null,
disbursementid integer not null,
userid integer not null,
productid integer not null,
storeid integer not null,
quantity integer not null,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(productid) references products(id),
foreign key(storeid) references store(id),
foreign key(disbursement_trucksid) references truck_destination(id),
foreign key(disbursementid) references disbursement(id)
);






create table  if not exists truck_to_grower(
id integer primary key auto_increment,
userid integer not null,
growerid integer not null,
disbursement_trucksid integer not null,
productid integer not null,
quantity integer not null,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(productid) references products(id),
foreign key(disbursement_trucksid) references truck_destination(id),
foreign key(growerid) references growers(id)
);





DELIMITER $$
create trigger on_disbursement
after insert on disbursement
for each row
BEGIN
 insert into total_disbursement(disbursement_trucksid,disbursementid,userid,productid,storeid,quantity,created_at
) values(NEW.disbursement_trucksid,NEW.id,NEW.userid,NEW.productid,New.storeid,New.quantity,NEW.created_at);
END; 
$$
DELIMITER ;


create table if not exists prices(
id integer primary key auto_increment,
userid integer not null,
productid integer not null,
amount double(100,2) not null default 0,
seasonid integer not null,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(productid) references products(id)
);


create table if not exists growers(
id integer primary key auto_increment,
userid integer not null,
name varchar(100) not null,
surname varchar(100) not null,
grower_num varchar(100) unique,
area varchar(100) not null,
province varchar(100),
phone varchar(100),
id_num varchar(100) not null,
seasonid integer not null,
sync integer not null default 1,
created_at varchar(100),
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id)
);






create table if not exists grower_profile(
id integer primary key auto_increment,
growerid integer not null,
image blob not null,
sync integer not null default 0,
created_at varchar(100) not null
);



create table if not exists assessment_type(
id integer primary key auto_increment,
name varchar(100) not null
);


create table if not exists assessments(
id integer primary key auto_increment,
userid integer not null,
name varchar(100) not null,
assessment_typeid integer not null default 1,
number integer not null default 1,
foreign key(userid) references users(id),
foreign key(assessment_typeid) references assessment_type(id)
);





create table if not exists lat_long(
id integer primary key auto_increment,
userid integer not null ,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
seasonid integer not null,
hectares varchar(100),
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(growerid) references growers(id),
foreign key(seasonid) references seasons(id)
);





create table if not exists barn_location(
id integer primary key auto_increment,
userid integer not null ,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
seasonid integer not null,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(growerid) references growers(id),
foreign key(seasonid) references seasons(id)
);




create table if not exists no_grower_location(
id integer primary key auto_increment,
userid integer not null ,
growerid integer not null,
description varchar(100) not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
seasonid integer not null,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(growerid) references growers(id),
foreign key(seasonid) references seasons(id)
);




create table if not exists grower_farm(
id integer primary key auto_increment,
userid integer not null ,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
seasonid integer not null,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(growerid) references growers(id),
foreign key(seasonid) references seasons(id)
);





create table if not exists assessment_images(
id integer primary key auto_increment,
userid integer not null,
growerid integer not null,
seasonid integer not null,
image varchar(1000000) not null,
description varchar(100) not null,
conditions varchar(100) not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(growerid) references growers(id),
foreign key(seasonid) references seasons(id)
);



create table if not exists grower_image(
id integer primary key auto_increment,
userid integer not null,
growerid integer not null,
seasonid integer not null,
image varchar(100000000) not null,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(growerid) references growers(id),
foreign key(seasonid) references seasons(id)
);





create table if not exists grower_visits(
id integer primary key auto_increment,
userid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
description varchar(100) not null,
conditions varchar(100) not null,
other varchar(100) not null,
seasonid integer not null,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(growerid) references growers(id),
foreign key(seasonid) references seasons(id)
);


create table if not exists quantitative_assessments(
id integer primary key auto_increment,
userid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
description varchar(100) not null,
number varchar(100) not null,
seasonid integer not null,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(growerid) references growers(id),
foreign key(seasonid) references seasons(id)
);




create table if not exists loans(
id integer primary key auto_increment,
userid integer not null,
growerid integer not null,
productid integer not null,
quantity integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
seasonid integer not null,
verified integer default 0,
processed integer default 0,
processed_by integer default 0,
processed_at varchar(100),
verified_by integer default 0,
hectares varchar(100) default 0,
verified_at varchar(100),
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(growerid) references growers(id),
foreign key(seasonid) references seasons(id),
foreign key(productid) references products(id)
);


create table if not exists contracted_hectares(
id integer primary key auto_increment,
userid integer not null,
growerid integer not null,
seasonid integer not null,
hectares varchar(100) not null,
sync integer not null default 0,
created varchar(100) not null,
foreign key(userid) references users(id),
foreign key(growerid) references growers(id),
foreign key(seasonid) references seasons(id),
);



create table if not exists con_loan(
id integer primary key auto_increment,
loanid integer not null,
sync integer not null default 0,
foreign key(loanid) references loans(id)
);




create table if not exists confirm_user(
id integer primary key auto_increment,
userid integer not null,
confirmid integer not null,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(confirmid) references con_loan(id)
);







create table if not exists sod(
id integer primary key auto_increment,
userid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
seasonid integer not null,
time varchar(100) not null,
eod integer not null default 0,
created_at varchar(100) not null,
sync integer not null default 0,
eod_created_at TEXT not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id)
);





create table if not exists exemptions(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
exemption_date varchar(100) not null,
description varchar(100) not null,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id)
);



create table if not exists recovery(
id integer primary key auto_increment,
grower_num varchar(100) not null,
seasonid integer not null,
userid integer not null,
bales integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id)
);




create table if not exists road_blocks(
id integer primary key auto_increment,
userid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
seasonid integer not null,
time varchar(100) not null,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id)
);


create table if not exists eod(
id integer primary key auto_increment,
userid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
seasonid integer not null,
time varchar(100) not null,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id)
);



create table if not exists off_route(

id integer primary key auto_increment,
userid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
seasonid integer not null,
time varchar(100) not null,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id)
);






create table if not exists parameters(
id integer primary key auto_increment,
name varchar(100) not null unique
);



create table if not exists charges(
id integer primary key auto_increment,
name varchar(100) not null unique
);



create table if not exists charges_amount(
id integer primary key auto_increment,
chargeid integer not null,
seasonid integer not null,
parameterid integer not null,
userid integer not null,
sync integer not null default 0,
value double(100,2) not null,
created_at varchar(100) not null
);







create table if not exists loan_payments(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
amount double(100,2) not null,
mass double(100,2) not null,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);









create table if not exists loan_balances(
id integer primary key auto_increment,
loanid integer not null,
amount double(100,2) default 0,
created_at varchar(100) not null
);






create table if not exists seed_beds(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
no_of_irr_beds integer not null default 0,
no_of_dry_beds integer not null default 0,
buying_seedlings_for varchar(100),
varieties_irr varchar(100),
varieties_dry varchar(100),
latitude varchar(100) not null,
longitude varchar(100) not null,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)

);




create table if not exists ploughing(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
no_of_plants integer not null,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);





create table if not exists fertilization_ammonium(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
kg_per_ha varchar(100) not null,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);





create table if not exists reaping(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
top_leaf integer not null default 0,
lugs integer not null default 0,
cutters integer not null default 0,
prime integer not null default 0,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);







create table if not exists curing(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
yellowing integer not null default 0,
leaf_drying integer not null default 0,
stem_drying integer not null default 0,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);






create table if not exists fertilization_potassium(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
kg_per_ha varchar(100) not null,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);






create table if not exists farm_mapping(

id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
first_lat varchar(100) not null,
first_long varchar(100) not null,
second_lat varchar(100) not null,
second_long varchar(100) not null,
third_lat varchar(100) not null,
third_long varchar(100) not null,
forth_lat varchar(100) not null,
forth_long varchar(100) not null,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)

);







create table if not exists hail_strike_mapping(

id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
first_lat varchar(100) not null,
first_long varchar(100) not null,
second_lat varchar(100) not null,
second_long varchar(100) not null,
third_lat varchar(100) not null,
third_long varchar(100) not null,
forth_lat varchar(100) not null,
forth_long varchar(100) not null,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)

);








create table if not exists seedling_quality(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
excellent integer not null default 0,
standard integer not null default 0,
average integer not null default 0,
poor integer not null default 0,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);






create table if not exists plant_irrigated(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
ha_planted_to_date varchar(100),
ha varchar(100),
date_of_plant varchar(100),
crop_stand_perc varchar(100),
crop_unifomity_perc varchar(100),
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)

);








create table if not exists planting_dryLand(

id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
ha_planted_to_date varchar(100),
ha varchar(100),
date_of_plant varchar(100),
crop_stand_perc varchar(100),
crop_unifomity_perc varchar(100),
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)

);








create table if not exists crop_growth(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
quarter_grown_5_7 integer not null default 0,
half_grown_8_12 integer not null default 0,
three_quarters_13_17 integer not null default 0,
full_grown_18_22 integer not null default 0,
fully_developed integer not null default 0,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);











create table if not exists crop_development(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
light_yellow integer default 0,
light_green integer default 0,
medium integer default 0,
heavy integer default 0,
heavy_and_dark integer default 0,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);









create table if not exists cultural_practices(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
weed_infestation_level_perc varchar(100),
weed_control_method varchar(100),
topping_level varchar(100),
basal_plant_fertilisation_kg_ha varchar(100),
suckering integer not null default 0,
post_topping_unifomity_perc varchar(100),
pets_and_disease_management varchar(100),
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)

);






create table if not exists barn_repair_and_maintenance(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
barn_not_repaired integer not null default 0,
barn_under_repair integer not null default 0,
finished_repaired integer not null default 0,
barn_working_well integer not null default 0,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)

);







create table if not exists hail_strike(
id integer primary key auto_increment,
userid integer not null,
seasonid integer not null,
growerid integer not null,
latitude varchar(100) not null,
longitude varchar(100) not null,
percentage_strike varchar(100) not null,
strike_date varchar(100) not null,
sync integer not null default 0,
created_at varchar(100) not null,
foreign key(userid) references users(id),
foreign key(seasonid) references seasons(id),
foreign key(growerid) references growers(id)
);





DELIMITER $$
create trigger on_loan_verification
after insert on con_loan
for each row
BEGIN
 UPDATE loans SET verified = 1  WHERE id = NEW.loanid;
END;
$$
DELIMITER ;



DELIMITER $$
create  trigger on_product_update
before update on store_items
for each row
BEGIN
insert into arc_products(storeitemid,userid,old_quantity,new_quantity,created_at) value(OLD.id,New.userid,OLD.quantity,NEW.quantity,NEW.created_at);
END;
$$
DELIMITER ;







insert into assessment_type(name) value("Qualitative");
insert into assessment_type(name) value("Quantitative");


insert into rights(description,notes) value("System administrator","System administrator");
insert into rights(description,notes) value("I.T Assistant","I.T Assistant");
insert into rights(description,notes) value("Accountant","Accountant");
insert into rights(description,notes) value("Account Clerk","Account Clerk");
insert into rights(description,notes) value("Hr Admin","Account Clerk");
insert into rights(description,notes) value("Hr Assistant","Hr Assistant");
insert into rights(description,notes) value("Area Manager","Area Manager");
insert into rights(description,notes) value("Field Officer","Field Officer");
insert into rights(description,notes) value("Field Officer(Loans Access)","Field Officer");
insert into rights(description,notes) value("Management","Management");
insert into rights(description,notes) value("Registration","Registration");
insert into rights(description,notes) value("WareHouse Supervisor","WareHouse Supervisor");



insert into users(name,surname,username,hash,rightsid,active,access_code,created_at) value("sysadmin","sysadmin","sysadmin","sysadmin",1,1,0000,"2022-09-12");


insert into province(names) value("Harare");
insert into province(names) value("Mashonaland East");
insert into province(names) value("Mashonaland West");
insert into province(names) value("Mashonaland Central");
insert into province(names) value("Manicaland");
insert into province(names) value("Matebeleland North");
insert into province(names) value("Matebeleland South");
insert into province(names) value("Masvingo");
insert into province(names) value("Midlands");
insert into province(names) value("Bulawayo");


insert into parameters(name) value("Amount");
insert into parameters(name) value("Percentage");

insert into charges(name) value("Interest");
insert into charges(name) value("Adminstration");






